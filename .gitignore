# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
*.so

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially important for library projects, to ensure consistent testing and CI.
#   However, for application projects, it is also common to exclude the lock file to ensure
#   the most recent versions of dependencies are used.
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to include it in
#   version control if you are working on a project that is intended to be used by others.
#.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains IDE
.idea/
*.iws
*.iml
*.ipr

# VS Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace

# Local History for Visual Studio Code
.history/

# Windows thumbnail cache files
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

# macOS
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Linux
*~

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

# JetBrains IDEs
# Covers: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
*.ijpb
*.iws
*.iml
*.ipr
*.ids
*.orig

# MATLAB
*.m~

# Data files (uncomment if you have large data files)
# *.csv
# *.pkl
# *.h5
# *.npy
# *.npz

# CDG Framework Specific
# ----------------------

# Generated images from simulations (we might want to keep some, so be careful)
# Uncomment the next line if you don't want to track generated images
# *.png
# *.jpg
# *.pdf

# Simulation output data
simulation_output/
output/
results/

# Large data files
data/raw/
data/processed/
*.data
*.dat

# Temporary files
temp/
tmp/
*.tmp
*.temp

# Log files
*.log
logs/

# Configuration files with sensitive information
config.ini
secrets.ini
*.key
*.pem

# Jupyter notebook outputs (we might want to keep these, so be careful)
# *.ipynb

# Package distributions
*.whl
*.tar.gz

# OS generated files
.DS_Store?
._*
.Spotlight-V100
.Trashes

# Editor backup files
*~
*.swp
*.swo

# Project specific
# Ignore any personal notes or scratch files
scratch/
personal/
drafts/

# Ignore any local database files
*.db
*.sqlite
*.sqlite3

# Ignore any local cache
.cache/
.pytest_cache/

# Ignore any local environment files
.env.local
.env.production
.env.development

# Keep these files tracked (override ignore)
!README.md
!CONTRIBUTING.md
!LICENSE
!requirements.txt

# CDG Research Data (large files - uncomment if needed)
# research_data/
# raw_data/
# processed_data/

# Machine learning models (if any)
models/
*.pth
*.pt
*.h5
*.keras

# Virtual environments (already covered above, but being explicit)
venv/
env/
.venv/

# IDE specific (already covered above, but being explicit)
.vscode/
.idea/
